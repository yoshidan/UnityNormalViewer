#pragma kernel NormalMain
#include "common.cginc"
#include "UnityCG.cginc"

#define QUATERNION_IDENTITY float4(0, 0, 0, 1)

RWStructuredBuffer<MeshData> _Buffer;

float4x4 _LocalToWorldMatrix;
float4x4 _Rotation;

float4 rotate_angle_axis(float angle, float3 axis)
{
    float sn = sin(angle * 0.5);
    float cs = cos(angle * 0.5);
    return float4(axis * sn, cs);
}

// UnityEngine.Quaternion.FromToRotation(Vector3, Vector3)
float4 from_to_rotation(float3 v1, float3 v2)
{
    float4 q;
    float d = dot(v1, v2);
    if (d < -0.999999)
    {
        float3 right = float3(1, 0, 0);
        float3 up = float3(0, 1, 0);
        float3 tmp = cross(right, v1);
        if (length(tmp) < 0.000001)
        {
            tmp = cross(up, v1);
        }
        tmp = normalize(tmp);
        q = rotate_angle_axis(UNITY_PI, tmp);
    }
    else if (d > 0.999999)
    {
        q = QUATERNION_IDENTITY;
    }
    else
    {
        q.xyz = cross(v1, v2);
        q.w = 1 + d;
        q = normalize(q);
    }
    return q;
}

// UnityEngine.Matrix4x4.MultiplyPoint(Vector3)
float3 multiply_point(float3 pt, float4x4 mat)
{
    float3 vector3;
    vector3.x = (mat[0][0] * pt.x + mat[0][1] * pt.y + mat[0][2] * pt.z) + mat[0][3];
    vector3.y = (mat[1][0] * pt.x + mat[1][1] * pt.y + mat[1][2] * pt.z) + mat[1][3];
    vector3.z = (mat[2][0] * pt.x + mat[2][1] * pt.y + mat[2][2] * pt.z) + mat[2][3];
    float num = 1.0 / ((mat[3][0] * pt.x + mat[3][1] * pt.y + mat[3][2] * pt.z) + mat[3][3]);
    vector3.x *= num;
    vector3.y *= num;
    vector3.z *= num;
    return vector3;
}

[numthreads(8,1,1)]
void NormalMain(uint3 id: SV_DispatchThreadID)
{
    
    const int index = id.x;
    MeshData data = _Buffer[index];

    // The argument normal is the direction in local coordinates, so give the object rotation to the normal
    // 引数の法線はローカル座標での方向なので、オブジェクトの回転を法線に与える
    float4 q = from_to_rotation(float3(0, 1, 0), mul(_Rotation, data.normal));
    float4x4 mat = {
        1 - 2 * q.y * q.y - 2 * q.z * q.z, 2 * q.x * q.y - 2 * q.z * q.w, 2 * q.x * q.z + 2 * q.y * q.w, 0,
        2 * q.x * q.y + 2 * q.z * q.w, 1 - 2 * q.x * q.x - 2 * q.z * q.z, 2 * q.y * q.z - 2 * q.x * q.w, 0,
        2 * q.x * q.z - 2 * q.y * q.w, 2 * q.y * q.z + 2 * q.x * q.w, 1 - 2 * q.x * q.x - 2 * q.y * q.y, 0,
        0, 0, 0, 1,
    };
    _Buffer[index].quaternion = q;
    _Buffer[index].rotationMatrix = mat;

    
    _Buffer[index].worldVertex = multiply_point(data.vertex, _LocalToWorldMatrix);
}
